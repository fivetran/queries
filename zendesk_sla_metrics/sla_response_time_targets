CREATE VIEW zendesk.sla_response_time_targets as (
with open_tickets as (
  select
    id
  from zendesk.ticket 
  where status not in ('closed','deleted')
), ticket_first_responded_at as (
  select
    ticket_comment.ticket_id,
    min(created) as responded_at
  from zendesk.ticket_comment
  join zendesk.user on ticket_comment.user_id = user.id
  where (user.role in ('admin', 'agent') or email like '%@sisense.com') and public
  group by ticket_id
),
status_timeline as (
  select 
    ticket_field_history.ticket_id,
    sla_metric_by_ticket.metric,
    value as status, 
    updated as time,
    case 
      when metric = 'agent_work_time' and value in ('pending','hold') then updated
      when metric = 'requester_wait_time' and value in ('pending') then updated
      else null
    end as time_paused,
    case
      when metric = 'agent_work_time' and value in ('pending','hold') then true
      when metric = 'requester_wait_time' and value in ('pending') then true
      else null
    end as paused,
    lag(value) over (partition by ticket_field_history.ticket_id, metric order by updated) as previous_status
  from zendesk.ticket_field_history
  join sla_metric_by_ticket on ticket_field_history.ticket_id = sla_metric_by_ticket.ticket_id
  where field_name = 'status'
   and metric in ('agent_work_time', 'requester_wait_time')
), flagging_paused_session as (
  select 
    ticket_id,
    metric,
    time,
    status,
    time_paused,
    if(paused and not coalesce(lag(paused) over parent,false),1,0)  as new_session,
    paused,
    case 
      when metric = 'agent_work_time' and previous_status in ('pending','hold') and status not in ('pending','hold') then time
      when metric = 'requester_wait_time' and previous_status in ('pending') and status not in ('pending') then time
    end as resume_time
  from status_timeline
  window parent as (partition by ticket_id, metric order by time)
), pause_session_number as (
  select 
    *,
    if (paused,sum(new_session) over (partition by ticket_id, metric order by time), null) as session_number
  from flagging_paused_session
), pause_time_per_session as (
  select 
    *,
    min(time_paused) over (partition by ticket_id, metric, session_number order by time) as pause_time 
  from pause_session_number
), combined as (
  select 
    ticket_id,
    metric,
    time,
    pause_time,
    if(paused,coalesce(min(resume_time) over (partition by ticket_id,metric order by time rows between current row and unbounded following),'2999-12-31 23:59:59 UTC'),null) as resume_time
  from pause_time_per_session
), pause_times as (
  select distinct
    ticket_id,
    metric,
    pause_time,
    resume_time
  from combined
  where pause_time is not null
), total_pause_time as (
  select 
    ticket_id,
    metric,
    sum(timestamp_diff(least(resume_time,current_timestamp()), pause_time, minute)) total_paused
  from pause_times
  group by 1, 2
), ticket_schedule_picked as (
-- use first schedule picked per ticket
  select distinct 
    ticket_id,
    first_value(schedule_id) over (partition by ticket_id order by created_at desc) schedule_id
  from zendesk.ticket_schedule 
), schedule_business_minutes_in_week as (
-- Total minutes in week, used for weeks array
  select 
    id as schedule_id,
    sum(end_time_utc - start_time_utc) as business_minutes_in_week
  from zendesk.schedule
  group by 1
), bussiness_weeks_to_target as (
  select 
    sla_metric_by_ticket.ticket_id,
    sla_metric_by_ticket.metric,
    sla_metric_by_ticket.instance_id,
    sla_metric_by_ticket.sla_policy_id,
    sla_metric_by_ticket.sla_applied_at,
    ticket_schedule_picked.schedule_id,
    sla_metric_by_ticket.target,
    cast((ceiling(sla_metric_by_ticket.target + coalesce(total_pause_time.total_paused,0)) / schedule_business_minutes_in_week.business_minutes_in_week) as int64) as  bussiness_weeks_to_target
  from sla_metric_by_ticket
  join ticket_schedule_picked on sla_metric_by_ticket.ticket_id = ticket_schedule_picked.ticket_id 
  join schedule_business_minutes_in_week on ticket_schedule_picked.schedule_id = schedule_business_minutes_in_week.schedule_id
  left join total_pause_time on sla_metric_by_ticket.ticket_id = total_pause_time.ticket_id 
    and sla_metric_by_ticket.metric = total_pause_time.metric
), adding_start_end_times as (
  select
    bussiness_weeks_to_target.ticket_id,
    bussiness_weeks_to_target.metric,
    bussiness_weeks_to_target.instance_id,
    bussiness_weeks_to_target.sla_policy_id,
    bussiness_weeks_to_target.sla_applied_at,
    bussiness_weeks_to_target.schedule_id,
    bussiness_weeks_to_target.target,
    bussiness_weeks_to_target.bussiness_weeks_to_target,
    schedule.start_time_utc,
    schedule.end_time_utc
  from bussiness_weeks_to_target 
  join zendesk.schedule on bussiness_weeks_to_target.schedule_id = schedule.id
), adding_week_number as (
  select
    *
  from adding_start_end_times, unnest(generate_array(0, bussiness_weeks_to_target)) as week_number
), adding_start_of_week as ( 
  select 
    *,
    timestamp_add(timestamp_trunc(sla_applied_at,week), interval week_number*(7*24*60) minute) as start_of_week
  from adding_week_number
), start_time_in_minutes as (
  select 
    *,
    greatest(timestamp_diff(sla_applied_at,start_of_week,minute),start_time_utc) as start_time,
    1 as mult
  from adding_start_of_week
), adding_pause_times as (
  select 
    *
  from start_time_in_minutes
  union all
  select 
    start_time_in_minutes.ticket_id,
    start_time_in_minutes.metric,
    instance_id,
    sla_policy_id,
    sla_applied_at,
    schedule_id,
    target,
    bussiness_weeks_to_target,
    greatest(start_time_utc, timestamp_diff(pause_time, start_of_week, minute)) start_time_utc,
    least(end_time_utc, timestamp_diff(resume_time, start_of_week, minute)) end_time_utc,
    week_number,
    start_of_week,
    start_time,
    -1 as mult
  from start_time_in_minutes
  join pause_times on start_time_in_minutes.ticket_id = pause_times.ticket_id
    and start_time_in_minutes.metric = pause_times.metric 
    and (
      (timestamp_add(start_of_week,interval start_time_utc minute) <= pause_time  and timestamp_add(start_of_week,interval end_time_utc minute) >= resume_time )
      or 
      (timestamp_add(start_of_week,interval start_time_utc minute) between pause_time  and resume_time )
      or 
      (timestamp_add(start_of_week,interval end_time_utc minute) between pause_time  and resume_time )
    ) 
), time_left as (
-- track time worked against the target to calculate breach time
  select 
    *,
    timestamp_add(start_of_week,interval start_time_utc minute) start_actual, timestamp_add(start_of_week,interval end_time_utc minute) end_actual,
    target - sum((end_time_utc -if(end_time_utc +(week_number*(7*24*60)) > start_time, greatest(start_time_utc,start_time),end_time_utc) )*mult) over running_total as time_left
  from adding_pause_times
  window running_total as (partition by ticket_id, metric, instance_id order by week_number,start_Time_utc rows between unbounded preceding and current row)
), breach_time as (
-- find breach by looking at min negative time_left value, and adding the time back to the schedule end time
  select
    ticket_id,
    metric,
    instance_id,
    sla_policy_Id,
    schedule_id,
    min(timestamp_add(start_of_week,interval end_time_utc+time_left.time_left minute)) as breach_time
  from time_left
  where time_left.time_left<=0
  group by 1,2,3,4,5
)

select 
  breach_time.ticket_id,
  breach_time.metric,
  breach_time.instance_id,
  breach_time.sla_policy_id,
  breach_time.schedule_id,
  sla_metric_by_ticket.sla_applied_at sla_start_time,
  if(business_hours,breach_time.breach_time,timestamp_add(sla_applied_at, interval target minute)) as breach_time,
  sla_metric_by_ticket.target,
  case 
    when breach_time.metric = 'first_reply_time' and ticket_first_responded_at.responded_at is null then true
    when breach_time.metric in ('agent_work_time', 'requester_wait_time') and open_tickets.id is not null then true
  end as is_active,
  if(open_tickets.id is not null, true, false) as ticket_is_open
from breach_time 
join sla_metric_by_ticket on breach_time.ticket_id = sla_metric_by_ticket.ticket_id 
  and breach_time.metric = sla_metric_by_ticket.metric
  and breach_time.instance_id = sla_metric_by_ticket.instance_id
left join ticket_first_responded_at on breach_time.ticket_id = ticket_first_responded_at.ticket_id
left join open_tickets on breach_time.ticket_id = open_tickets.id
order by breach_time desc
)
